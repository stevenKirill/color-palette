{"version":3,"sources":["App.styled.ts","components/Color.styled.ts","components/Color.tsx","consts/colors.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","div","bg","fontSize","ColorsWrapper","ColorBlock","Color","color","pickColor","console","log","text","onClick","colors","App","useState","background","setBackgound","currentColor","setCurrentColor","useEffect","timer","setTimeout","clearTimeout","theme","className","map","idx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAQaA,EAAUC,IAAOC,IAAV,wRACI,qBAAGC,MAGV,qBAAGC,YASPC,EAAgBJ,IAAOC,IAAV,4FCfbI,EAAaL,IAAOC,IAAV,ybACC,qBAAGC,M,eCcZI,EAXiB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UAEtC,OADAC,QAAQC,IAAIH,GAER,cAACF,EAAD,CAAYH,GAAIK,EAAhB,SACI,cAAC,kBAAD,CAAiBI,KAAI,UAAKJ,GAA1B,SACI,sBAAMK,QAAS,kBAAMJ,EAAUD,IAA/B,SAAwCA,SCb3CM,EAAmB,CAC5B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WCiCWC,MAnCf,WACE,MAAkCC,mBAAiB,WAAnD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAuCF,mBAAwB,WAA/D,mBAAOG,EAAP,KAAoBC,EAApB,KAKAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,EAAgB,QAChB,KACF,OAAO,kBAAMI,aAAaF,MAC1B,CAACH,IAEH,IAAMV,EAAY,SAACD,GACfU,EAAaV,GACbY,EAAgBZ,IAGpB,OACE,cAAC,IAAD,CAAeiB,MAjBH,CACZrB,SAAU,QAgBV,SACE,qBAAKsB,UAAU,MAAf,SACE,eAAC1B,EAAD,CAASG,GAAIc,EAAYb,SAAS,OAAlC,UACoB,OAAjBe,GAAyB,yCAAYA,KACtC,cAACd,EAAD,UACGS,EAAOa,KAAI,SAACnB,EAAcoB,GACzB,OAAO,cAAC,EAAD,CAAiBpB,MAAOA,EAAOC,UAAWA,GAA9BmB,gBCpBlBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ffaf8cf1.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { IColor } from \"./interfaces/colors\";\n\ninterface IWrapper {\n    bg: IColor;\n    fontSize: string;\n}\n\nexport const Wrapper = styled.div<IWrapper>`\n    background-color: ${({ bg }) => bg};\n    width: 100vw;\n    height: 100vh;\n    font-size: ${({ fontSize }) => fontSize};\n    transition: background 0.5s cubic-bezier(0.075, 0.82, 0.165, 1);\n    h1 {\n        color: white;\n        margin-bottom: 10px;\n        margin-top: 0;\n    }\n`;\n\nexport const ColorsWrapper = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n`;","import styled from \"styled-components\";\n\ninterface IClorBlock {\n    bg: string;\n};\n\nexport const ColorBlock = styled.div<IClorBlock>`\n    background-color: ${({ bg }) => bg};\n    padding: 10px;\n    width: 200px;\n    height: 200px;\n    border-radius: 5px;\n    margin-top: 10px;\n    border: 1px solid white;\n    box-shadow: '0 0 5px #000';\n    &:nth-child(1) {\n        margin-left: 15px;\n    }\n    &:nth-child(5n) {\n        margin-left: 15px;\n    }\n    span {\n        text-align: center;\n        font-size: 17px;\n        cursor: pointer;\n    }\n`;","import React from 'react';\nimport { IColor } from '../interfaces/colors';\nimport { ColorBlock } from './Color.styled';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\ninterface IProps {\n    color: IColor\n    pickColor: (currentColor: IColor) => void;\n};\n\nconst Color: React.FC<IProps> = ({ color, pickColor }) => {\n    console.log(color)\n    return (\n        <ColorBlock bg={color}>\n            <CopyToClipboard text={`${color}`}> \n                <span onClick={() => pickColor(color)}>{color}</span>\n            </CopyToClipboard>\n        </ColorBlock>\n    )\n}\n\nexport default Color\n","import { IColor } from \"../interfaces/colors\";\n\nexport const colors: IColor[] = [\n    '#264653',\n    '#2a9d8f',\n    '#e9c46a',\n    '#f4a261',\n    '#e76f51',\n    '#4895ef',\n    '#caf0f8',\n    '#6b705c',\n];","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { IColor } from './interfaces/colors';\nimport { Wrapper, ColorsWrapper } from './App.styled';\nimport { ThemeProvider } from 'styled-components';\nimport Color from './components/Color';\nimport { colors } from './consts/colors';\n\nfunction App() {\n  const [background,setBackgound] = useState<IColor>('#264653');\n  const [currentColor,setCurrentColor] = useState<IColor | null>('#264653');\n  const theme = {\n    fontSize: '20px',\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setCurrentColor(null);\n    },3000)\n    return () => clearTimeout(timer);\n  },[currentColor])\n\n  const pickColor = (color: IColor): void => {\n      setBackgound(color);\n      setCurrentColor(color);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Wrapper bg={background} fontSize=\"20px\">\n          {currentColor !== null && <h1>Copied {currentColor}</h1>}\n          <ColorsWrapper>\n            {colors.map((color: IColor,idx) => {\n              return <Color key={idx} color={color} pickColor={pickColor}/>\n            })}\n          </ColorsWrapper>\n        </Wrapper>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}